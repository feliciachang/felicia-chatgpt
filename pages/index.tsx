import Head from "next/head";
import Image from "next/image";
import MessageHistory, { Message } from "@/components/message-history";
import EmptyState from "@/components/message-history/empty-state";
import { useState } from "react";
import styles from "@/styles/Home.module.css";
import formStyles from "@/components/input-box/index.module.css";

export default function Home() {
  const [messageHistory, setMessageHistory] = useState<Message[]>([]);
  const [chunk, setChunk] = useState<string[]>([]);
  const [input, setInput] = useState("");

  async function handleSendMessage(message: string) {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: message }],
        stream: true,
      }),
      headers: {
        "Content-type": "application/json",
        Authorization:
          "Bearer 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",
      },
    });
    const reader = res.body?.pipeThrough(new TextDecoderStream()).getReader();

    while (true) {
      const res = await reader?.read();
      if (res?.done) {
        console.log("The stream is done.");
        break;
      }
      console.log(res?.value);
      let chatStrings = res?.value.trim().split("\n");
      console.log(chatStrings);
      if (chatStrings) {
        chatStrings.forEach((chatString) => {
          if (chatString.length > 0) {
            if (chatString !== "data: [DONE]") {
              let chatObj = JSON.parse(
                `{"${chatString.slice(0, 4)}"${chatString.slice(4)}}`
              );
              let content = chatObj?.data.choices[0].delta?.content;
              if (content) {
                setChunk((chunk) => [...chunk, content]);
              }
            }
          }
        });
      }
    }
  }

  return (
    <>
      <Head>
        <title>FelChat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {messageHistory.length > 0 ? (
          <MessageHistory history={messageHistory} />
        ) : (
          <EmptyState />
        )}
        <div>
          {chunk.map((chunkItem) => (
            <span key={chunkItem}>{chunkItem}</span>
          ))}
        </div>
        <form
          className={formStyles.inputBox}
          onSubmit={(e) => {
            e.preventDefault();
            setMessageHistory((messageHistory) => [
              ...messageHistory,
              {
                sender: "ai",
                message: chunk.join(),
              },
              {
                sender: "user",
                message: input,
              },
            ]);
            setChunk([]);
            handleSendMessage(input);
            setInput("");
          }}
        >
          <input
            className={formStyles.textArea}
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
          />
          <button className={formStyles.button} type="submit">
            <Image src="/send-button.svg" alt="arrow" width={25} height={25} />
          </button>
        </form>
      </main>
    </>
  );
}

{
  /* <a
href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
className={styles.card}
target="_blank"
rel="noopener noreferrer"
>
<h2 className={inter.className}>
  Deploy <span>-&gt;</span>
</h2>
<p className={inter.className}>
  Instantly deploy your Next.js site to a shareable URL
  with&nbsp;Vercel.
</p>
</a> */
}
